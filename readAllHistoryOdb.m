function [odbOut,odbDat,rpyOut]=readAllHistoryOdb(varargin)
%
% Read the history output of an odb file
%
% Syntax
%     [#odbOut#,#odbDat#,#rpyOut#]=readHistoryOdb(#odbFile#,#stepName#,...
%         #outputVar#,#indOut#,#abqDir#)
%
% Description
%     This function extracts the history output from an Abaqus odb file and
%     prints the results in an output (*.out) file and their indexing in an
%     indexing (*.ind) file, whereas it loads both the results and their
%     indices in Matlab for post-processing. The procedure is as follows:
%         1.It checks if the #odbFile# exists in the working directory. If
%         it does not exist, it terminates with an error
%         2.Find all rpy files in the working directory and delete them, if
%         any. If they cannot be deleted for any reason, they will all be
%         processed at the end.
%         3.Upgrade the odb file, in case that it is created from an older
%         version of Abaqus. If the version is current, it is not upgraded
%         and a message is issued by Abaqus, which appears in the command
%         window. If the file is upgraded, then the new odb file is
%         postprocessed instead of the old odb file that is specified by
%         the user and a warning is issued.
%         4.Create the Python script required to read the odb file,
%         according to the selected odb file, step, history output variable
%         identifier, and option for the creation of the indexing file.
%         5.Run the above Python script in Abaqus in order to create the
%         output file and possibly create the indexing (ind) file.
%         6.Load the output and, if present, indexing files and read the
%         file abaqus.rpy (as well as other rpy files if they were not
%         deleted in step 2 above) to which the model details are printed
%         during the execution of step 5 above. After the output and
%         possibly indexing data is loaded on Matlab memory, they can be
%         post-processed as desired.
%     During the execution of this function and provided that no rpy file
%     existed in the working directory before its execution, 5 files will
%     be created in the working directory:
%         1. A file named [#odbFile#(1:end-4),'_UpToDate-upgrade.log']
%         which is empty and is created by Abaqus during the upgrading
%         attempt.
%         2. A file named readHistoryOdb.py, which contains the Python code
%         which is executed in order to retrieve the results from the odb
%         file.
%         3. A file named abaqus.rpy, which contains some Python commands
%         issued by Abaqus during the execution of this function, (b) some
%         details of the model analyzed which are output from this function
%         in a vector format (#rpyOut#), and any warnings issued by the
%         Python script readHistoryOdb.py, which are also shown in the
%         Matlab command window.
%         4. A file named [#odbFile#(1:end-4),'.out'] which contains the
%         numerical results extracted from the odb file in tabular form
%         delimited by commas (,).
%         5. A file named [#odbFile#(1:end-4),'.ind'] which contains the
%         indices corresponding to the numerical results extracted from the
%         odb file in tabular form delimited by commas (,).
%     Type ''help rpyRead'' and ''help readHistoryOdbPyScript'' in
%     the Matlab command window for more details.
%     ***NOTE: The Abaqus License server has to be open for this function
%     to run properly.
%     ***NOTE: If there are any rpy files in the Abaqus working directory
%     before execution of this function, and they cannot be deleted,
%     possibly because they are used by another program (usually Abaqus),
%     relevant warnings are issued and finally all the rpy files are read.
%     The user should avoid the presence of many rpy files in the working
%     directory, since reading all of them could result in confusion due to
%     excessive information printout in the Matlab command window.
%     ***NOTE: The [#odbFile#(1:end-4),'.out'], [#odbFile#(1:end-4),'.ind']
%     and abaqus.rpy files are processed after the execution of the Python
%     script terminates, and therefore Matlab execution has to be halted
%     until then. For this purpose, a lock file named
%     #odbFile#(1:end-4).lck is created while the Python script is running,
%     and it is automatically deleted when the execution of the script
%     completes successfully.
%
% Input parameters
%     REQUIRED:
%     #odbFile# (string) is a string containing the name of the ABAQUS
%         output data base (*.odb) file, along with its extension, which is
%         to be read in order to investigate its history output. The odb
%         file is generated by Abaqus after the analysis has been
%         completed.
%     #stepName# (string or 'False' or 'None') is a string containing the
%         name of the step to be postprocessed. If it has a valid name,
%         then only the specific step is postprocessed. If it has an
%         invalid name, all steps in the odb are postprocessed. If it has
%         the values 'False' or 'None' (case sensitive) all the steps
%         contained in the odb file are postprocessed. If the odb file does
%         not contain any steps, no postprocessing takes place and an error
%         message is issued.
%     #outputVar# (string or 'False' or 'None') is a string containing the
%         name of the history output variable identifier to which the
%         printed results are associated. If it has a valid name, then only
%         results of the specific history output variable are printed. If
%         it has an invalid name, no output will be printed. If it has the
%         values 'False' or 'None' (case sensitive) all the history output
%         results contained in the odb file are printed.
%     #indOut# ('True' or 'False') is a boolean string which specifies if
%         the indexing data of the Abaqus results will be printed in a
%         separate ind file. Indexing is specified in terms of serial
%         numbers in the following format:
%             Column 1: Step
%             Column 2: History region
%             Column 3: History output
%             Column 4: History output data
%     OPTIONAL:
%     #abqDir# (string) is a string containing the path of the current
%         working directory in which the odb file exists.
%
% Output parameters
%     #odbOut# ([#n# x #m#]) is a floating point array containing the
%         results in the odb file which are retrieved by this function. The
%         results are first printed in an external file
%         #odbFile#(1:end-4).out and then this file is loaded into Matlab.
%         If there is any existing file with the same name and extension
%         before the execution of this function, then it is deleted
%         (without asking for permission) and populated from scratch.
%     #odbDat# ([#p# x #q#]) is an integer array containing the indices for
%         the results in #odbOut#. The indices are first printed in an
%         external file #odbFile#(1:end-4).ind and then this file is loaded
%         into Matlab. If there is any existing file with the same name and
%         extension before the execution of this function, then it is
%         deleted (without asking for permission) and populated from
%         scratch.
%     #rpyOut# ([7 x 1]) is a column vector containing the model
%         information of the Abaqus rpy file in the following order:
%         #rpyOut#(1): the number of assemblies in the odb
%         #rpyOut#(2): the number of instances at the assembly level
%         #rpyOut#(3): the number of instances at the part level
%         #rpyOut#(4): the number of meshes
%         #rpyOut#(5): the number of element sets (both at the assembly and
%             instance level)
%         #rpyOut#(6): the number of node sets (both at the assembly and
%             instance level)
%         #rpyOut#(7): the number of steps
%
% Example
%     abqDir='C:\Abaqus_Temp';
%     odbFile='26.odb';
%     stepName='False'; % process all steps
%     outputVar='None'; % process all variables
%     indOut='True';
%     [odbOut,odbDat,rpyOut]=readHistoryOdb(odbFile,stepName,...
%         outputVar,indOut,abqDir)
%
%
% _________________________________________________________________________
% Abaqus2Matlab - www.abaqus2matlab.com
% Copyright (c) 2017 by George Papazafeiropoulos
%
% If using this toolbox for research or industrial purposes, please cite:
% G. Papazafeiropoulos, M. Muniz-Calvente, E. Martinez-Paneda.
% Abaqus2Matlab: a suitable tool for finite element post-processing.
% Advances in Engineering Software. Vol 105. March 2017. Pages 9-16. (2017) 
% DOI:10.1016/j.advengsoft.2017.01.006



% Initial checks
if nargin<1
    error('Not enough input arguments.');
elseif nargin==1
    odbFile=varargin{1};
    abqDir=pwd; % Use the directory of this function
elseif nargin==2 && nargin==3
    error('Not enough input arguments.');
elseif nargin==4
    odbFile=varargin{1};
    stepName=varargin{2};
    outputVar=varargin{3};
    indOut=varargin{4};    
    abqDir=pwd; % Use the directory of this function
elseif nargin==5
    odbFile=varargin{1};
    stepName=varargin{2};
    outputVar=varargin{3};
    indOut=varargin{4};    
    abqDir=varargin{5}; % Use the directory specified by the user
    if nargin>5
        warning('Too many input arguments. Some will not be used')
    end
end
oldFolder=cd(abqDir);
% Check if odbFile exists in the working directory
if ~(exist(odbFile,'file')==2)
    error(['The file ',odbFile,' does not exist'])
end
% Find any rpy files in the Abaqus working directory
e=dir([abqDir,'\*.rpy*']);
numFiles=size(e,1);
% If there are any rpy files in the Abaqus working directory, then try to
% delete them one by one. If any of them cannot be deleted, issue a warning
% message and read them after execution of the Python script
for i=1:numFiles
    rpyFileName=e(i).name;
    try
        delete(rpyFileName)
    catch
        warning([rpyFileName,' cannot be deleted and will be processed.']);
    end
end
% Upgrade in case that the version of the odb file is older than the
% version of Abaqus running on the pc.
system(['abaqus -upgrade -job ',odbFile(1:end-4),'_UpToDate -odb ',odbFile(1:end-4)]);
% If upgrading has taken place, then [odbFile(1:end-4),'_UpToDate.odb'] has
% been created. If this file exists, postprocess the new file instead of
% the old odb file already specified.
if exist([odbFile(1:end-4),'_UpToDate.odb'],'file')==2
    odbFile=[odbFile(1:end-4),'_UpToDate.odb'];
    warning(['The odb file was upgraded to ',odbFile(1:end-4),...
        '_UpToDate.odb. The results will be extracted from this file.']);
end
% Execute main script
lckFile=[odbFile(1:end-4),'.lck'];
% readHistoryOdbPyScript(odbFile,stepName,outputVar,indOut);
if exist('readAllHistoryOdb.py','file')==2
    !abaqus cae nogui=readAllHistoryOdb.py
%     system('abaqus python readAllHistoryOdb.py');
    % Pause Matlab execution in order for the lck file to be created
    pause(0.5);
    % While the lck file exists, pause Matlab execution. If it is deleted,
    % exit the while loop and proceed.
    while exist(lckFile,'file')==2
        pause(0.1)
    end
    % Load numerical results in Matlab
    try
        odbOut=load([odbFile(1:end-4),'.out']);
    catch
        warning(['Data from ',odbFile(1:end-4),'.out could not be loaded'])
        if exist([odbFile(1:end-4),'.out'],'file')==2
            fileID=fopen([odbFile(1:end-4),'.out']);
            odbOut=fread(fileID,'*char')';
            fclose(fileID);
            disp(odbOut)
        end
    end
    % Load indexing results in Matlab
    try
        odbDat=load([odbFile(1:end-4),'.ind']);
    catch
        warning(['Data from ',odbFile(1:end-4),'.ind could not be loaded'])
        if exist([odbFile(1:end-4),'.ind'],'file')==2
            fileID=fopen([odbFile(1:end-4),'.ind']);
            odbDat=fread(fileID,'*char')';
            fclose(fileID);
            disp(odbDat)
        end
    end
    % Read all rpy files present in the working directory.
    e=dir([abqDir,'\*.rpy*']);
    numFiles=size(e,1);
    if numFiles > 0
        for i=1:numFiles
            rpyFileName=e(i).name;
            rpyOut=rpyRead(rpyFileName,zeros(0,1),zeros(1,0),zeros(1,0),zeros(1,0),zeros(1,0));
        end
    elseif numFiles == 0
        rpyOut='No rpy files found';
    end
else
    error('The Python script was not created and postprocessing was not done.')
end
cd(oldFolder);
end

